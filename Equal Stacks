def equalStacks(h1, h2, h3):
    """    h1 = h1[::-1]
    h2 = h2[::-1]
    h3 = h3[::-1]
    # print("step 0:")
    # print(h1)
    # print(h2)
    # print(h3)
    for i in range(1,len(h1)): # sum of all the previous elements
        h1[i] = h1[i]+h1[i-1]
    for i in range(1,len(h2)):#sum of all the previous elements
        h2[i] = h2[i]+h2[i-1]
    for i in range(1,len(h3)):#sum of all the previous elements
        h3[i] = h3[i]+h3[i-1]
    # print("step 1:")
    # print(h1)
    # print(h2)
    # print(h3)
    # again reverse the array 
    h1 = h1[::-1]
    h2 = h2[::-1]
    h3 = h3[::-1]
    # print("step 2:")
    # print(h1)
    # print(h2)
    # print(h3)
    
    if len(h1) < len(h2) and len(h1)< len(h3):
        Min = h1
    elif len(h2) < len(h3) and len(h2) < len(h1):
        Min = h2
    else:
        Min = h3
    # print("Min:",Min)
    for i in Min:
        if i in h1 and i in h2 and i in h3:
            return i
    else:
        return '0'
    """
    h1,h2,h3 = h1[::-1], h2[::-1], h3[::-1] 
    s1,s2,s3 = map(sum,(h1,h2,h3))
    # print(s1,s2,s3)
    while h1 and h2 and h3:
        m= min(s1,s2,s3)
        while s1>m : 
            s1-=h1.pop()
        while s2>m:
            s2-=h2.pop()
        while s3>m:
            s3-=h3.pop()
        if s1==s2==s3 :
            return s1
    return 0
            
        
    

if __name__ == '__main__':

    first_multiple_input = input().rstrip().split()

    n1 = int(first_multiple_input[0])

    n2 = int(first_multiple_input[1])

    n3 = int(first_multiple_input[2])

    h1 = list(map(int, input().rstrip().split()))

    h2 = list(map(int, input().rstrip().split()))

    h3 = list(map(int, input().rstrip().split()))

    result = equalStacks(h1, h2, h3)
    print(result)
    
    
    """
    Step I. get the 3 array and reverse them, create a new array out of an existing array with each element is sum of all the previous elements. eg: [3,2,1,1,1] -> [1,1,1,2,3] -> [1,2,3,5,8]

So the 3 new array formed would be [1,2,3,5,8] [2,5,9] [1,5,6,7]

Step II. Again reverse the array [8,5,3,2,1] [9,5,2] [7,6,5,1]

Step III. Take the smallest array i.e. [9,5,2] traverse the smallest array and search element in the other 2 array - if the element is existing in other 2 array, STOP there and return the number.

Eg. Here I start with elem - 9 : Which is not existing in other 2 array. Next I start with elem - 5 : it is existing in other 2 array.

Wolla! 5 is my NUMBER!
    """
